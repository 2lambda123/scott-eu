// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package se.ericsson.cf.scott.sandbox.twin;

import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import eu.scott.warehouse.MqttClientBuilder;
import eu.scott.warehouse.MqttTopics;
import eu.scott.warehouse.TrsMqttGateway;
import eu.scott.warehouse.domains.trs.TrsXConstants;
import java.net.URI;
import java.util.UUID;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;

import org.eclipse.lyo.client.oslc.OslcClient;
import org.eclipse.lyo.store.Store;
import org.eclipse.paho.client.mqttv3.MqttClient;
import eu.scott.warehouse.domains.pddl.PlanExecutionResult;

// Start of user code imports
import org.eclipse.paho.client.mqttv3.MqttException;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import se.ericsson.cf.scott.sandbox.twin.clients.TwinRegistrationClient;
import se.ericsson.cf.scott.sandbox.twin.trs.TrsMqttClientManager;
import se.ericsson.cf.scott.sandbox.twin.trs.TwinAckRegistrationAgent;

//import se.ericsson.cf.scott.sandbox.twin.ros.RobotClientNode;

// End of user code

// Start of user code pre_class_code
// End of user code

public class RobotTwinManager {

    // Start of user code class_attributes
    public final static String PACKAGE_ROOT = RobotTwinManager.class.getPackage().getName();
    private final static Logger log = LoggerFactory.getLogger(RobotTwinManager.class);
    private final static UUID uuid = UUID.randomUUID();
    private static String trsTopic;
    private static TrsMqttClientManager trsClientManager;
    private static Store store;
    private static ServletContext servletContext;
    private static TrsMqttGateway mqttGateway;
    // End of user code

    @NotNull
    public static String getTwinUUID() {
        return "twn-" + uuid.toString();
    }

    public static String getTrsTopic() {
        if(Strings.isNullOrEmpty(trsTopic)) {
            log.warn("The TRS topic was requested before it was set");
        }
        return trsTopic;
    }

    public static void setTrsTopic(String trsTopic) {
        RobotTwinManager.trsTopic = trsTopic;
    }

    public static TrsMqttClientManager getTrsClientManager() {
        return trsClientManager;
    }

    public static void setTrsClientManager(TrsMqttClientManager trsClientManager) {
        RobotTwinManager.trsClientManager = trsClientManager;
    }

    public static ServletContext getServletContext() {
        return servletContext;
    }
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {

        // Start of user code contextInitializeServletListener
        log.info("Twin {} is starting", getTwinUUID());
        servletContext = servletContextEvent.getServletContext();
//        final Store store = LyoStoreManager.initLyoStore();
//        setStore(store);

//        RosManager.runRosNode();
//        new Thread(RobotTwinManager::runRosNode).run();
//        RosManager.execMainNode();

        final String mqttBroker = AdaptorHelper.p("trs.mqtt.broker");
//        final TrsMqttClientManager trsClientManager = new TrsMqttClientManager(mqttBroker);
//        setTrsClientManager(trsClientManager);
//        new Thread(trsClientManager::connectAndSubscribeToPlans).run();
        // FIXME Andrew@2018-07-31: remove non-gateway based code
        try {
            mqttGateway = new MqttClientBuilder().withBroker(mqttBroker)
                                                 .withId(getTwinUUID())
                                                 .withRegistration(new TwinAckRegistrationAgent(
                                                         MqttTopics.WHC_PLANS))
                                                 .build();
        } catch (MqttException e) {
            log.error("Failed to initialise the MQTT gateway", e);
        }

        registerTwins();
        // End of user code
    }

    private static void registerTwins() {
        final OslcClient client = new OslcClient();
        final TwinRegistrationClient registrationClient = new TwinRegistrationClient(
            client, "http://sandbox-whc:8080/services/service2/registrationRequests/register");

        for(String id: ImmutableList.of("r1", "r2", "r3")) {
            registrationClient.registerTwin("robot", id);
        }

    }

    private static void setStore(final Store store) {
        RobotTwinManager.store = store;
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent)
    {

        // Start of user code contextDestroyed
        log.info("Destroying the servlet");
        try {
            mqttGateway.disconnect();
        } catch (MqttException e) {
            log.error("Failed to disconnect from the MQTT broker");
        }
//        getTrsClientManager().unregisterTwinAndDisconnect();
        // End of user code
    }

    @SuppressWarnings("Duplicates")
    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};

        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        // TODO Andrew@2018-07-29: use Shelf Twin helper methods
        final ServiceProviderInfo serviceProviderInfo = new ServiceProviderInfo();
        serviceProviderInfo.serviceProviderId = "default";
        serviceProviderInfo.name = "Default Service Provider";
        serviceProviderInfos = new ServiceProviderInfo[]{serviceProviderInfo};
        // End of user code
        return serviceProviderInfos;
    }



    public static PlanExecutionResult getPlanExecutionResult(HttpServletRequest httpServletRequest, final String serviceProviderId, final String planExecutionResultId)
    {
        PlanExecutionResult aResource = null;
        
        // Start of user code getPlanExecutionResult
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }




    public static String getETagFromPlanExecutionResult(final PlanExecutionResult aResource)
    {
        String eTag = null;
        // Start of user code getETagFromPlanExecutionResult
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
