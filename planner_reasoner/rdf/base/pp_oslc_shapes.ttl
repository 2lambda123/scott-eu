##############################################################################
# studied from the bnf specification of PDDL 2.1.
# https://www.jair.org/media/1129/live-1129-2132-jair.pdf without durative actions
##############################################################################

@prefix : <http://ontology.cf.ericsson.net/planning_ontology_oslc_shapes#> .
@prefix ppos: <http://ontology.cf.ericsson.net/planning_ontology_oslc_shapes#> .
@prefix pp: <http://ontology.cf.ericsson.net/planning_ontology#> .
@prefix wd: <http://ontology.cf.ericsson.net/warehouse_domain_and_problem#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix oslc: <http://open-services.net/ns/core#> . #oslc core
@prefix sh: <http://www.w3.org/ns/shacl#> . # shapes constraint languge SHACL
@base <http://ontology.cf.ericsson.net/planning_ontology_oslc_shapes> .


:ActionShape rdf:type oslc:ResourceShape ;
            oslc:describes pp:Action ;
            dcterms:title   "Shape of resources of type PDDL Action";
            oslc:property [a oslc:Property ;
                             oslc:propertyDefinition :hasPrecondition ; #URI of hasPrecondition property http://ontology.cf.ericsson.net/planning_ontology_oslc_shapes#hasprecondition
                             # GoalDescription and Precondition can have the same arguments according to PDDL 2.1.
                             oslc:name "hasPrecondition"^^xsd:string ;
                             oslc:range pp:GoalDescription ;
                             oslc:occurs oslc:Exectly-one ;
                             oslc:valueType oslc:Resource ;
                             dcterms:title    "details for hasPrecondition property of a PDDL action" ;
                            ] ,
                            [a oslc:Property ;
                             oslc:propertyDefinition :hasEffect ;
                             oslc:name "hasEffect"^^xsd:string ;
                             oslc:range pp:Effect ;
                             oslc:occurs oslc:Exectly-one ;
                             oslc:valueType oslc:Resource ;
                             dcterms:title    "details for hasEffect property of a PDDL action" ;
                            ] ,
                            [a oslc:Property ;
                             oslc:propertyDefinition :hasParameters ; #used for specifing the parameters in an action
                             oslc:name "hasActionParameters"^^xsd:string ;
                             oslc:range pp:TypedVariable ;
                             oslc:occurs oslc:One-or-many ;
                             oslc:valueType oslc:Resource;
                             dcterms:title    "details for hasParameters property of a PDDL action" ;
                            ] .


:TypedVariableShape rdf:type oslc:ResourceShape ;  #used in the FluentType Definition
            dcterms:title   "Shape of resources of type ActionParameters "; # e.g. ?robot -Robot
            oslc:describes pp:TypedVariable ;
            oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasVariable ;
                          oslc:name "hasVariable"^^xsd:string ;
                          oslc:occurs oslc:Exectly-one ;
                          oslc:valueType oslc:Resource;
                          ],
                          [a oslc:Property ;
                          oslc:propertyDefinition :hasVariableType ; #a fluent can be only be fluent type
                          oslc:name "hasVariableType"^^xsd:string ;
                          oslc:range pp:VariableType ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType oslc:Resource ;
                          ].

:PredicateTypeParametersShape rdf:type oslc:ResourceShape ;  #used in the PredicateType Definition
            dcterms:title   "Shape of resources of type PredicateTypeParameters "; # e.g. ?robot -Robot
            oslc:describes pp:ActionParameter ;
            oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasVariable ;
                          oslc:name "hasVariable"^^xsd:string ;
                          oslc:occurs oslc:Exectly-one ;
                          oslc:valueType oslc:Resource;
                          ],
                          [a oslc:Property ;
                          oslc:propertyDefinition :hasVariableType ; #
                          oslc:name "hasVariableType"^^xsd:string ;
                          oslc:range pp:VariableType ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType oslc:Resource ;
                          ].


:GoalDescriptionShape rdf:type oslc:ResourceShape ;
              oslc:describes pp:GoalDescription ;
              oslc:property [a oslc:Property ;
              dcterms:title   "Shape of resources of type Goal Description (GD) in PDDL";
                             oslc:propertyDefinition :hasGDArgument ; #used to model that a goal description/precondition can  be either empty ()  or have the top resources (root): logical operators, just a predicate  e.g. is_at or binary comparison operator >,< etc used for fluents
                             oslc:name "hasGoalDescriptionArgument"^^xsd:string ;
                             oslc:range pp:Predicate ;
                             oslc:range pp:AndGD ;
                             oslc:range pp:Or ;
                             oslc:range pp:NotGD ;
                             oslc:range pp:Imply ;
                             oslc:range pp:Exists ;
                             oslc:range pp:ForAll ;
                             oslc:range pp:BinaryComparison ;
                             oslc:occurs oslc:Zero-or-one ;  #CHECK THIS FOR CASE <GD> :: = () . if there is no property hasGoalDescriptionArgument then only () should be generated in PDDL
                             oslc:valueType oslc:Resource ;
                            ] .


:EffectShape rdf:type oslc:ResourceShape ;
            oslc:describes pp:Effect ;
            oslc:property [a oslc:Property ;
                             oslc:propertyDefinition :hasEffectArgument ; #used to model that an effect can be either empty ()  or have the top predicate resources (root predicate): and, forall, when,  just a Predicate e.g. is_at , negation of a Predicate, assignment operation over fluents
                             oslc:name "hasEffectArgument"^^xsd:string ;
                             oslc:range pp:AndEffect ;
                             oslc:range pp:ForAll ;
                             oslc:range pp:When ;
                             oslc:range pp:AssignmentOperator ;  #TO BE CHECKED there can be two types page 116 from PDDL 2.1 BNF
                             oslc:range pp:NotEffect ;
                             oslc:occurs oslc:Zero-or-one ;
                             oslc:valueType oslc:Resource ;
                            ] .

#VariableType will come from another domain, e.g. Robotics, ITS, or combination of domains
:VariableTypeShape rdf:type oslc:ResourceShape ;
            oslc:describes pp:VariableType .

:VariableShape rdf:type oslc:ResourceShape ;
            oslc:describes pp:Variable .

:FluentTypeArgumentShape rdf:type oslc:ResourceShape ;  #used in the FluentType Definition
            dcterms:title   "Shape of resources of type parameters allowed in the FluentType Shape, e.g. the pair ?r-Robot ";
            oslc:describes pp:FluentTypeArgument ;
            oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasVariable ; #used
                          oslc:name "hasVariable"^^xsd:string ;
                          oslc:occurs oslc:Exectly-one ;
                          oslc:valueType xsd:string ;
                          ],
                          [a oslc:Property ;
                          oslc:propertyDefinition :hasVariableType ; #a fluent can be only be fluent type
                          oslc:name "hasVariableType"^^xsd:string ;
                          oslc:range pp:VariableType ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType oslc:Resource ;
                          ].


:FluentTypeShape rdf:type oslc:ResourceShape ;  #used in the FluentType Definition
            dcterms:title   "Shape of resources of fluent type that model non-binary resources";
            oslc:describes pp:FluentType ;  #Functions are over numeric fluents that model non-binary resources e.g. fuel level, energy etc.
            oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasFluentTypeParameter ;
                          oslc:name "hasFluentTypeParameter"^^xsd:string ;
                          oslc:range pp:FluentTypeParameter;
                          oslc:occurs oslc:One-Or-Many ;
                          oslc:valueType oslc:Resource ;
                          ].


:FluentShape rdf:type oslc:ResourceShape ;
            dcterms:title   "Shape of resources of fluents "; #will have in arguments variables and type; instead of dummy variable (literal) and type.
            oslc:describes pp:Fluent ;
            oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasFluentType ; #a fluent can be only be fluent type
                          oslc:name "hasFluentType"^^xsd:string ;
                          oslc:range pp:FluentType ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType oslc:Resource ;
                          ],
                          [a oslc:Property ;
                          oslc:propertyDefinition :hasFluentVariable ; #fluents are over variables
                          oslc:name "hasFluentVariable"^^xsd:string ;
                          oslc:range pp:FluentVariable ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType oslc:Resource ;
                          ],
                          [a oslc:Property ;
                          oslc:propertyDefinition :hasFluentVariableType ; #the types of the variables in the fluents e.g. variable r is of type Robot
                          oslc:name "hasFluentVariableType"^^xsd:string ;
                          oslc:range pp:FluentVariableType ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType oslc:Resource ;
                          ].

:FExpShape rdf:type oslc:ResourceShape;
            oslc:describes pp:FExp ;
            oslc:property [a oslc:Property ;
                           oslc:propertyDefinition :hasArgument ; #a Fexp can contain a number (numeric literal that is an integer of float of form n.n), a negative fluent expression,  or an FHead
                           oslc:name "hasArgument"^^xsd:string ;
                           oslc:range pp:FHead ;
                           oslc:range pp:MinusFunction ;
                           oslc:range pp:BinaryOperator ;
                           oslc:range pp:NumericLiteral ;
                           oslc:occurs oslc:Exactly-one ;
                           oslc:valueType oslc:Resource ;
                           ].

:NumericLiteralShape rdf:type oslc:ResourceShape;
           oslc:describes pp:NumericLiteral ;
           oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasValue ; #a Fexp can contain a number (numeric literal that is an integer of float of form n.n), a negative fluent expression,  or an FHead
                          oslc:name "hasValue"^^xsd:string ;
                          oslc:occurs oslc:Exactly-one ;
                          oslc:valueType xsd:integer ; #the value can be either integer or float n.n, however for now we support only integers
                          ].

:FHeadShape rdf:type oslc:ResourceShape;
            oslc:describes pp:FHead ;
            oslc:property [a oslc:Property ;
                           oslc:propertyDefinition :hasArgument ; #a Fexp can contain a number (numeric literal that is an integer of float of form n.n), a negative fluent expression,  or an FHead
                           oslc:name "hasArgument"^^xsd:string ;
                           oslc:range pp:Fluent ;
                           oslc:occurs oslc:Exactly-one ;
                           oslc:valueType xsd:string ;
                           ].

:MinusFunctionShape rdf:type oslc:ResourceShape;
           oslc:describes pp:MinusFunction ;
           oslc:property [a oslc:Property ;
                          oslc:propertyDefinition :hasArgument ; #a Fexp can contain a number (numeric literal that is an integer of float of form n.n), a negative fluent expression,  or an FHead
                          oslc:name "hasArgument"^^xsd:string ;
                          oslc:range pp:FExp ;
                          oslc:valueType xsd:string ;
                          ].



:OrderedArgumentShape rdf:type oslc:ResourceShape;
            oslc:describes pp:OrderedArgument ;
            oslc:property [a oslc:Property ;
                           oslc:propertyDefinition sh:order ;
                           oslc:name "order"^^xsd:string ;
                           oslc:occurs oslc:Exactly-one ;
                           oslc:valueType xsd:integer ;
                            ] .

:PredicateTypeShape rdf:type oslc:ResourceShape ;
                  oslc:describes :PredicateType ;
                  dcterms:title   "Shape of resources of PDDL predicate types- predicates properties of objects that we are interested in, can be true or false";
                  oslc:property [a oslc:Property ;
                                 oslc:propertyDefinition :hasPredicateTypeArgument  ; #used to specify that a PredicateType can have arguments (pair variable and type)
                                 oslc:name "hasVariableArguments"^^xsd:string ;
                                 oslc:range pp:PredicateArgument ;
                                 oslc:occurs oslc:One-or-many ;
                                 oslc:valueType oslc:Resource ;
                                  ] .

:BinaryComparisonShape rdf:type oslc:ResourceShape ;
                  oslc:describes pp:BinaryComparison ;
                  dcterms:title   "Shape of resources of type Binary Comparison  used in the goal description together with PDDL fluents/functions";
                  oslc:property [a oslc:Property ;
                                 oslc:propertyDefinition :hasFExp  ; #used to specify that Binary Comparison is made between FExp
                                 oslc:name "hasFExp"^^xsd:string ;
                                 oslc:range pp:FExp ;
                                 oslc:occurs oslc:One-or-many ; #EXECTLY TWO?
                                 oslc:valueType oslc:Resource ;
                                  ] .

:AssignmentOperatorShape rdf:type oslc:ResourceShape ;
                oslc:describes pp:AssignmentOperator ;
                dcterms:title   "Shape of resources of type Assignment Operator that can be used in the root of an effect of a PDDL action together with FHead and FExp, note that FHead should be always the first argument, and FExp the second argument of Assignment Operator";
                oslc:property [a oslc:Property ;
                               oslc:propertyDefinition :hasFHeadArgument  ; #used to specify that a Predicate can have variables
                               oslc:name "hasFHeadArgument"^^xsd:string ;
                               oslc:range pp:FHead ;
                               oslc:occurs oslc:Exectly-one ; #The position of Fhead should be the first
                               oslc:valueType oslc:Resource ;
                                ] ,
                                [a oslc:Property ;
                                oslc:propertyDefinition :hasFExpArgument  ; #used to specify that a Predicate can have variables
                                oslc:name "hasFExpArgument"^^xsd:string ;
                                oslc:range pp:FExp ;
                                oslc:range
                                oslc:occurs oslc:Exectly-one ; The position of Fhead should be second
                                oslc:valueType oslc:Resource ;
                                ] .


:AndGoalDescriptionShape rdf:type oslc:ResourceShape;  #describes And used in precondition
                oslc:describes pp:AndGD ; #attributes of And used in a precondition
                dcterms:title   "Shape of resources of type -and- predicate used in goal description/precondition of a PDDL action";
                oslc:property [a oslc:Property ;
                               oslc:propertyDefinition :hasArgumentInGD  ; #common predicates may have nested predicates
                               oslc:name "hasArgumentInGD"^^xsd:string ;
                               oslc:range pp:And ,
                                          pp:Predicate ,
                                          pp:Or ,
                                          pp:Not ,
                                          pp:Imply ,
                                          pp:Exists ,
                                          pp:ForAll ;
                               oslc:occurs oslc:Zero-or-many ;
                               oslc:valueType oslc:Resource ;
                                ] .


:AndEffectShape rdf:type oslc:ResourceShape;  #describes And used in effect
                oslc:describes pp:AndEffect ; #attributes of And used in effect
                dcterms:title   "Shape of resources of type -and- predicate used in the effect of a PDDL action";
                oslc:property [a oslc:Property ;
                               oslc:propertyDefinition :hasArgumentInEffect  ; #common predicates may have nested predicates
                               oslc:name "hasArgumentInEffect"^^xsd:string ;
                               oslc:range pp:When ,
                                          pp:ForAll ,
                                          pp:AssignmentOperator ,
                                          pp:Not ,
                                          pp:Predicate ;
                               oslc:occurs oslc:Zero-or-many ;
                               oslc:valueType oslc:Resource ;
                                ] .


:NotGoalDescriptionShape rdf:type oslc:ResourceShape;  #describes Not that can be used as a logical operator in precondition and effect)
                  oslc:describes pp:NotGD ;
                  dcterms:title   "Shape of resources of type -not- predicate used in goal description/precondition of a PDDL action";
                  oslc:property [a oslc:Property ;
                                 oslc:propertyDefinition :hasArgumentInGD  ; #not can have only one argument of following types in precondition
                                 oslc:name "hasArgumentInGD"^^xsd:string ;
                                 oslc:range pp:And ,
                                            pp:Predicate ,
                                            pp:Or ,
                                            pp:Not ,
                                            pp:Imply ,
                                            pp:Exists ,
                                            pp:ForAll ;
                                 oslc:occurs oslc:Exectly-one ;
                                 oslc:valueType oslc:Resource ;
                                  ] .

:NotEffectShape rdf:type oslc:ResourceShape;  #describes Not that can be used as a logical operator in precondition and effect)
                  oslc:describes pp:NotEffect ;
                  dcterms:title   "Shape of resources of type -not- predicate used in the effect of a PDDL action";
                  oslc:property [a oslc:Property ;
                                 oslc:propertyDefinition :hasArgumentInEffect  ; #not can have only one argument, which is a user defined predicate in the effect
                                 oslc:name "hasArgumentInEffect"^^xsd:string ;
                                 oslc:range pp:Predicate ;
                                 oslc:occurs oslc:Exectly-one ;
                                 oslc:valueType oslc:Resource ;
                                  ] .


:ExistsShape rdf:type oslc:ResourceShape;
                  oslc:describes pp:Exists ;
                  dcterms:title   "Shape of resources of type exist that can be used in goal description";
                  oslc:property [a oslc:Property ;
                                 oslc:propertyDefinition :hasTypedVariable ;
                                 oslc:name "hasTypedVariable"^^xsd:string ;
                                 oslc:range pp:TypedVariable ;
                                 oslc:occurs oslc:Zero-or-many ;
                                 oslc:valueType oslc:Resource ;
                                  ] ;
                                  [a oslc:Property ;
                                 oslc:propertyDefinition :hasGoalDescription ;
                                 oslc:name "hasGoalDescription"^^xsd:string ;
                                 oslc:range pp:GoalDescription ;
                                 oslc:occurs oslc:Exectly-one ;
                                 oslc:valueType oslc:Resource ;
                                  ] .


:OrShape rdf:type oslc:ResourceShape;  #describes Or that can be used as a logical operator in precondition)
                  oslc:describes pp:Or . #TO BE DEFINED, SEPARATED IN PRECONDITION AND EFFECT

:WhenShape rdf:type oslc:ResourceShape;  #describes When used in effect
                  oslc:describes pp:When . #TO BE DEFINED, SEPARATED IN PRECONDITION AND EFFECT

:ForAllShape rdf:type oslc:ResourceShape;  #describes ForAll that can be used in precondition anf effect with different properties). Will be divived into two shapes
                    oslc:describes pp:ForAll . #TO BE DEFINED, SEPARATED IN PRECONDITION AND EFFECT
