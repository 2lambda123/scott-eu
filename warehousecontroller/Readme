Mission to Plan Service

Usage instructions:

0. Configure mission2plan.py file with the path to the FF planner (See below)
1. python mission2plan.py - starts the server at port 5000
2. Test the service is running using curltest3
3. POST a mission file in json format. Look at the curl comand in the file curltest4

Current set of files
   mission2plan.py - service to derive a plan from a mission
   whdomain-2.pddl - current version of the warehouse domain file
   kb.json - a local file which will be accessed from the KB service in full deployment
   mission.json - example input file, which will be coming with a call from the MOO_manager
   curltest3 - tests whether service is running or no
   curltest4 - tests the returned plan steps with the input "mission.json"

FF Planner
	Get the source code from 
	https://fai.cs.uni-saarland.de/hoffmann/metric-ff.html
	and compile. Current implementation uses metric-FF v2.0
	

Details of mission2plan.py
	The PDDL problem file has two parts. The :init part is derived from the kb.json file.
	The :final part is derived from the goals in the mission.json file. Both these tasks
	are done in the constructPddlProblem function. compute_mission_data is the main end-point
	invoked by the external entity (MOO_Manager) which parses the mission input file and 
	calls the constructPddlProblem.
	
   
Future plans 
	1. mission2plan.py is a monolithic code which will be modularaized in the coming versions
	2. Exception handling to be added
	3. Use a test folder for all the tests
	4. Add more tests to test both functionality coverage and scalability
	5. domain file is local at present, this is also to be obtained from a repository